{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.RegexParser = void 0;\nconst stream_1 = require(\"stream\");\n/**\n * A transform stream that uses a regular expression to split the incoming text upon.\n *\n * To use the `Regex` parser provide a regular expression to split the incoming text upon. Data is emitted as string controllable by the `encoding` option (defaults to `utf8`).\n */\nclass RegexParser extends stream_1.Transform {\n  constructor({\n    regex,\n    ...options\n  }) {\n    const opts = {\n      encoding: 'utf8',\n      ...options\n    };\n    if (regex === undefined) {\n      throw new TypeError('\"options.regex\" must be a regular expression pattern or object');\n    }\n    if (!(regex instanceof RegExp)) {\n      regex = new RegExp(regex.toString());\n    }\n    super(opts);\n    this.regex = regex;\n    this.data = '';\n  }\n  _transform(chunk, encoding, cb) {\n    const data = this.data + chunk;\n    const parts = data.split(this.regex);\n    this.data = parts.pop() || '';\n    parts.forEach(part => {\n      this.push(part);\n    });\n    cb();\n  }\n  _flush(cb) {\n    this.push(this.data);\n    this.data = '';\n    cb();\n  }\n}\nexports.RegexParser = RegexParser;","map":{"version":3,"names":["Object","defineProperty","exports","value","RegexParser","stream_1","require","Transform","constructor","regex","options","opts","encoding","undefined","TypeError","RegExp","toString","data","_transform","chunk","cb","parts","split","pop","forEach","part","push","_flush"],"sources":["C:/Users/tmart/Desktop/Dissertacao/TourOfHeroes/tour-of-heroes-osc.js/tour-of-heroes/node_modules/@serialport/parser-regex/dist/index.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.RegexParser = void 0;\nconst stream_1 = require(\"stream\");\n/**\n * A transform stream that uses a regular expression to split the incoming text upon.\n *\n * To use the `Regex` parser provide a regular expression to split the incoming text upon. Data is emitted as string controllable by the `encoding` option (defaults to `utf8`).\n */\nclass RegexParser extends stream_1.Transform {\n    constructor({ regex, ...options }) {\n        const opts = {\n            encoding: 'utf8',\n            ...options,\n        };\n        if (regex === undefined) {\n            throw new TypeError('\"options.regex\" must be a regular expression pattern or object');\n        }\n        if (!(regex instanceof RegExp)) {\n            regex = new RegExp(regex.toString());\n        }\n        super(opts);\n        this.regex = regex;\n        this.data = '';\n    }\n    _transform(chunk, encoding, cb) {\n        const data = this.data + chunk;\n        const parts = data.split(this.regex);\n        this.data = parts.pop() || '';\n        parts.forEach(part => {\n            this.push(part);\n        });\n        cb();\n    }\n    _flush(cb) {\n        this.push(this.data);\n        this.data = '';\n        cb();\n    }\n}\nexports.RegexParser = RegexParser;\n"],"mappings":"AAAA,YAAY;;AACZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,WAAW,GAAG,KAAK,CAAC;AAC5B,MAAMC,QAAQ,GAAGC,OAAO,CAAC,QAAQ,CAAC;AAClC;AACA;AACA;AACA;AACA;AACA,MAAMF,WAAW,SAASC,QAAQ,CAACE,SAAS,CAAC;EACzCC,WAAWA,CAAC;IAAEC,KAAK;IAAE,GAAGC;EAAQ,CAAC,EAAE;IAC/B,MAAMC,IAAI,GAAG;MACTC,QAAQ,EAAE,MAAM;MAChB,GAAGF;IACP,CAAC;IACD,IAAID,KAAK,KAAKI,SAAS,EAAE;MACrB,MAAM,IAAIC,SAAS,CAAC,gEAAgE,CAAC;IACzF;IACA,IAAI,EAAEL,KAAK,YAAYM,MAAM,CAAC,EAAE;MAC5BN,KAAK,GAAG,IAAIM,MAAM,CAACN,KAAK,CAACO,QAAQ,CAAC,CAAC,CAAC;IACxC;IACA,KAAK,CAACL,IAAI,CAAC;IACX,IAAI,CAACF,KAAK,GAAGA,KAAK;IAClB,IAAI,CAACQ,IAAI,GAAG,EAAE;EAClB;EACAC,UAAUA,CAACC,KAAK,EAAEP,QAAQ,EAAEQ,EAAE,EAAE;IAC5B,MAAMH,IAAI,GAAG,IAAI,CAACA,IAAI,GAAGE,KAAK;IAC9B,MAAME,KAAK,GAAGJ,IAAI,CAACK,KAAK,CAAC,IAAI,CAACb,KAAK,CAAC;IACpC,IAAI,CAACQ,IAAI,GAAGI,KAAK,CAACE,GAAG,CAAC,CAAC,IAAI,EAAE;IAC7BF,KAAK,CAACG,OAAO,CAACC,IAAI,IAAI;MAClB,IAAI,CAACC,IAAI,CAACD,IAAI,CAAC;IACnB,CAAC,CAAC;IACFL,EAAE,CAAC,CAAC;EACR;EACAO,MAAMA,CAACP,EAAE,EAAE;IACP,IAAI,CAACM,IAAI,CAAC,IAAI,CAACT,IAAI,CAAC;IACpB,IAAI,CAACA,IAAI,GAAG,EAAE;IACdG,EAAE,CAAC,CAAC;EACR;AACJ;AACAlB,OAAO,CAACE,WAAW,GAAGA,WAAW","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}