{"ast":null,"code":"import { HEADSETS } from '../mock-vrInfo';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common\";\nimport * as i2 from \"@angular/forms\";\nfunction VRInfoComponent_li_3_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r3 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"li\")(1, \"label\", 2);\n    i0.ɵɵtext(2, \"Name: \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"input\", 3);\n    i0.ɵɵlistener(\"ngModelChange\", function VRInfoComponent_li_3_Template_input_ngModelChange_3_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r3);\n      const headset_r1 = restoredCtx.$implicit;\n      return i0.ɵɵresetView(headset_r1.name = $event);\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(4, \" Two way data-binding \");\n    i0.ɵɵelement(5, \"br\");\n    i0.ɵɵelementStart(6, \"label\", 2);\n    i0.ɵɵtext(7, \"IpAdress: \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(8, \"input\", 3);\n    i0.ɵɵlistener(\"ngModelChange\", function VRInfoComponent_li_3_Template_input_ngModelChange_8_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r3);\n      const headset_r1 = restoredCtx.$implicit;\n      return i0.ɵɵresetView(headset_r1.ipAdress = $event);\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(9, \"br\");\n    i0.ɵɵelementStart(10, \"label\", 2);\n    i0.ɵɵtext(11, \"Port: \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(12, \"input\", 3);\n    i0.ɵɵlistener(\"ngModelChange\", function VRInfoComponent_li_3_Template_input_ngModelChange_12_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r3);\n      const headset_r1 = restoredCtx.$implicit;\n      return i0.ɵɵresetView(headset_r1.port = $event);\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(13, \"br\");\n    i0.ɵɵelementStart(14, \"label\", 2);\n    i0.ɵɵtext(15, \"Status: \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(16, \"input\", 3);\n    i0.ɵɵlistener(\"ngModelChange\", function VRInfoComponent_li_3_Template_input_ngModelChange_16_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r3);\n      const headset_r1 = restoredCtx.$implicit;\n      return i0.ɵɵresetView(headset_r1.currentStatusEnum = $event);\n    });\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const headset_r1 = ctx.$implicit;\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"ngModel\", headset_r1.name);\n    i0.ɵɵadvance(5);\n    i0.ɵɵproperty(\"ngModel\", headset_r1.ipAdress);\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"ngModel\", headset_r1.port);\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"ngModel\", headset_r1.currentStatusEnum);\n  }\n}\nexport class VRInfoComponent {\n  constructor() {\n    this.headsetsList = HEADSETS;\n  }\n  ngOnInit() {}\n  sendOSC() {\n    fetch(\"http://localhost:3000/VRHeadsets\");\n    //http://localhost:3000/DownloadAssets/VR1\n  }\n  static #_ = this.ɵfac = function VRInfoComponent_Factory(t) {\n    return new (t || VRInfoComponent)();\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: VRInfoComponent,\n    selectors: [[\"app-vrinfo\"]],\n    decls: 4,\n    vars: 1,\n    consts: [[1, \"Headsets\"], [4, \"ngFor\", \"ngForOf\"], [\"for\", \"\"], [\"type\", \"text\", 3, \"ngModel\", \"ngModelChange\"]],\n    template: function VRInfoComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"h1\");\n        i0.ɵɵtext(1, \"VR list\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(2, \"ul\", 0);\n        i0.ɵɵtemplate(3, VRInfoComponent_li_3_Template, 17, 4, \"li\", 1);\n        i0.ɵɵelementEnd();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"ngForOf\", ctx.headsetsList);\n      }\n    },\n    dependencies: [i1.NgForOf, i2.DefaultValueAccessor, i2.NgControlStatus, i2.NgModel],\n    styles: [\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n  });\n}","map":{"version":3,"names":["HEADSETS","i0","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵlistener","VRInfoComponent_li_3_Template_input_ngModelChange_3_listener","$event","restoredCtx","ɵɵrestoreView","_r3","headset_r1","$implicit","ɵɵresetView","name","ɵɵelement","VRInfoComponent_li_3_Template_input_ngModelChange_8_listener","ipAdress","VRInfoComponent_li_3_Template_input_ngModelChange_12_listener","port","VRInfoComponent_li_3_Template_input_ngModelChange_16_listener","currentStatusEnum","ɵɵadvance","ɵɵproperty","VRInfoComponent","constructor","headsetsList","ngOnInit","sendOSC","fetch","_","_2","selectors","decls","vars","consts","template","VRInfoComponent_Template","rf","ctx","ɵɵtemplate","VRInfoComponent_li_3_Template"],"sources":["C:\\Users\\tmart\\Desktop\\Dissertacao\\SatoreApp\\angular\\src\\app\\vrinfo\\vrinfo.component.ts","C:\\Users\\tmart\\Desktop\\Dissertacao\\SatoreApp\\angular\\src\\app\\vrinfo\\vrinfo.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { vrInfo } from 'src/vrInfo';\nimport { HEADSETS } from '../mock-vrInfo';\n\n@Component({\n  selector: 'app-vrinfo',\n  templateUrl: './vrinfo.component.html',\n  styleUrls: ['./vrinfo.component.css']\n})\nexport class VRInfoComponent implements OnInit {\n\n  headsetsList = HEADSETS; \n\n  ngOnInit(): void {\n  }\n\n  sendOSC() {\n    fetch(\"http://localhost:3000/VRHeadsets\");\n    //http://localhost:3000/DownloadAssets/VR1\n  }\n\n}\n","<!--\n<h1> {{ vrinfo1.name }} Headset added</h1>\n\n\n<div>\n    <label for=\"\">Name: </label>\n    <input type= \"text\" [(ngModel)] =\"vrinfo1.name\"> Two way data-binding\n    <br>\n    <label for=\"\">IpAdress: </label>\n    <input type= \"text\" [(ngModel)] =\"vrinfo1.ipAdress\"> \n    <br>\n    <label for=\"\">Port: </label>\n    <input type= \"text\" [(ngModel)] =\"vrinfo1.port\"> \n    <br>\n    <label for=\"\">Status: </label>\n    <input type= \"text\" [(ngModel)] =\"vrinfo1.currentStatusEnum\"> \n\n    <br>\n    <button (click)=\"sendOSC()\"> Click me for OSC Message to {{ vrinfo1.name }}</button>\n\n</div>\n-->\n\n<h1>VR list</h1>\n\n<ul class= \"Headsets\">\n    <li *ngFor =\"let headset of headsetsList\">\n        <!--<span class = \"badge\"> {{headset.id}} </span> {{headset.name}}-->\n\n        <label for=\"\">Name: </label>\n        <input type= \"text\" [(ngModel)] =\"headset.name\"> Two way data-binding\n        <br>\n        <label for=\"\">IpAdress: </label>\n        <input type= \"text\" [(ngModel)] =\"headset.ipAdress\"> \n        <br>\n        <label for=\"\">Port: </label>\n        <input type= \"text\" [(ngModel)] =\"headset.port\"> \n        <br>\n        <label for=\"\">Status: </label>\n        <input type= \"text\" [(ngModel)] =\"headset.currentStatusEnum\"> \n\n    </li>\n</ul>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}