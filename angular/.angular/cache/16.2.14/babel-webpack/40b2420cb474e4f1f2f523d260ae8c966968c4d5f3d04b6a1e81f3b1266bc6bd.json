{"ast":null,"code":"/*\n * osc.js: An Open Sound Control library for JavaScript that works in both the browser and Node.js\n *\n * Node.js transports for osc.js\n *\n * Copyright 2014-2016, Colin Clark\n * Licensed under the MIT and GPL 3 licenses.\n */\n\n/*global require, module, Buffer*/\n/*jshint node:true*/\n\n(function () {\n  \"use strict\";\n\n  var shallowMerge = function (target, toMerge) {\n    target = target || {};\n    if (toMerge.forEach === undefined) {\n      toMerge = [toMerge];\n    }\n    toMerge.forEach(function (obj) {\n      for (var prop in obj) {\n        target[prop] = obj[prop];\n      }\n    });\n    return target;\n  };\n  var dgram = require(\"dgram\"),\n    net = require(\"net\"),\n    WebSocket = require(\"ws\"),\n    modules = [require(\"../osc.js\"), require(\"../osc-transports.js\"), require(\"./osc-websocket-client.js\"), require(\"./osc-node-serialport-loader.js\")],\n    osc = shallowMerge({}, modules);\n\n  /*******\n   * UDP *\n   *******/\n\n  osc.UDPPort = function (options) {\n    osc.Port.call(this, options);\n    this.options.localAddress = this.options.localAddress || \"127.0.0.1\";\n    this.options.localPort = this.options.localPort !== undefined ? this.options.localPort : 57121;\n    this.options.remoteAddress = this.options.remoteAddress || \"127.0.0.1\";\n    this.options.remotePort = this.options.remotePort !== undefined ? this.options.remotePort : 57121;\n    this.on(\"open\", this.listen.bind(this));\n    this.socket = options.socket;\n    if (this.socket) {\n      this.emit(\"open\", this.socket);\n    }\n  };\n  var p = osc.UDPPort.prototype = Object.create(osc.Port.prototype);\n  p.constructor = osc.UDPPort;\n  p.open = function () {\n    var that = this;\n    if (this.socket) {\n      return;\n    }\n    this.socket = dgram.createSocket(\"udp4\");\n    this.socket.on(\"error\", function (error) {\n      that.emit(\"error\", error);\n    });\n    function onBound() {\n      osc.UDPPort.setupMulticast(that);\n      if (that.options.broadcast) {\n        that.socket.setBroadcast(that.options.broadcast);\n      }\n      that.emit(\"open\", that.socket);\n    }\n    this.socket.bind(this.options.localPort, this.options.localAddress, onBound);\n  };\n  p.listen = function () {\n    if (!this.socket) {\n      return;\n    }\n    var that = this;\n    this.socket.on(\"message\", function (msg, rinfo) {\n      that.emit(\"data\", msg, rinfo);\n    });\n    this.socket.on(\"close\", function () {\n      that.emit(\"close\");\n    });\n    that.emit(\"ready\");\n  };\n  p.sendRaw = function (encoded, address, port) {\n    if (!this.socket) {\n      osc.fireClosedPortSendError(this);\n      return;\n    }\n    var length = encoded.byteLength !== undefined ? encoded.byteLength : encoded.length,\n      that = this;\n    address = address || this.options.remoteAddress;\n    port = port !== undefined ? port : this.options.remotePort;\n    this.socket.send(encoded, 0, length, port, address, function (err) {\n      if (err) {\n        that.emit(\"error\", err);\n      }\n    });\n  };\n  p.close = function () {\n    if (this.socket) {\n      this.socket.close();\n    }\n  };\n  osc.UDPPort.setupMulticast = function (that) {\n    if (that.options.multicastTTL !== undefined) {\n      that.socket.setMulticastTTL(that.options.multicastTTL);\n    }\n    if (that.options.multicastMembership) {\n      if (typeof that.options.multicastMembership === \"string\") {\n        that.options.multicastMembership = [that.options.multicastMembership];\n      }\n      that.options.multicastMembership.forEach(function (addr) {\n        if (typeof addr === \"string\") {\n          that.socket.addMembership(addr);\n        } else {\n          that.socket.addMembership(addr.address, addr.interface);\n        }\n      });\n    }\n  };\n\n  /*******\n   * TCP *\n   *******/\n\n  osc.TCPSocketPort = function (options) {\n    osc.SLIPPort.call(this, options);\n    var o = this.options;\n\n    // Aliases \"localAddress\" and \"localPort\" to\n    // \"address\" and \"port\", respectively, for consistency\n    // with osc.UDPSocket.\n    o.address = o.address || o.localAddress || \"127.0.0.1\";\n    o.port = o.port !== undefined ? o.port : o.localPort !== undefined ? o.localPort : 57121;\n    this.on(\"open\", this.listen.bind(this));\n    this.socket = options.socket;\n    if (this.socket) {\n      this.emit(\"open\", this.socket);\n    }\n  };\n  p = osc.TCPSocketPort.prototype = Object.create(osc.SLIPPort.prototype);\n  p.constructor = osc.TCPSocketPort;\n  p.open = function (address, port) {\n    var o = this.options;\n    address = address || o.address;\n    port = port !== undefined ? port : o.port;\n    if (!this.socket) {\n      this.socket = net.connect({\n        port: port,\n        host: address\n      });\n    } else {\n      this.socket.connect(port, address);\n    }\n    this.emit(\"open\", this.socket);\n  };\n  p.listen = function () {\n    var that = this;\n    this.socket.on(\"data\", function (msg) {\n      that.emit(\"data\", msg, undefined);\n    });\n    this.socket.on(\"error\", function (err) {\n      that.emit(\"error\", err);\n    });\n    this.socket.on(\"close\", function (hadError) {\n      that.emit(\"close\", hadError);\n    });\n    this.socket.on(\"connect\", function () {\n      that.emit(\"ready\");\n    });\n  };\n  p.sendRaw = function (encoded) {\n    if (!this.socket) {\n      return;\n    }\n    encoded = Buffer.from(encoded);\n    try {\n      this.socket.write(encoded);\n    } catch (err) {\n      this.emit(\"error\", err);\n    }\n  };\n  p.close = function () {\n    this.socket.end();\n  };\n  module.exports = osc;\n})();","map":{"version":3,"names":["shallowMerge","target","toMerge","forEach","undefined","obj","prop","dgram","require","net","WebSocket","modules","osc","UDPPort","options","Port","call","localAddress","localPort","remoteAddress","remotePort","on","listen","bind","socket","emit","p","prototype","Object","create","constructor","open","that","createSocket","error","onBound","setupMulticast","broadcast","setBroadcast","msg","rinfo","sendRaw","encoded","address","port","fireClosedPortSendError","length","byteLength","send","err","close","multicastTTL","setMulticastTTL","multicastMembership","addr","addMembership","interface","TCPSocketPort","SLIPPort","o","connect","host","hadError","Buffer","from","write","end","module","exports"],"sources":["C:/Users/tmart/Desktop/Dissertacao/TourOfHeroes/tour-of-heroes-osc.js/tour-of-heroes/node_modules/osc/src/platforms/osc-node.js"],"sourcesContent":["/*\n * osc.js: An Open Sound Control library for JavaScript that works in both the browser and Node.js\n *\n * Node.js transports for osc.js\n *\n * Copyright 2014-2016, Colin Clark\n * Licensed under the MIT and GPL 3 licenses.\n */\n\n/*global require, module, Buffer*/\n/*jshint node:true*/\n\n(function () {\n    \"use strict\";\n\n    var shallowMerge = function (target, toMerge) {\n        target = target || {};\n        if (toMerge.forEach === undefined) {\n            toMerge = [toMerge];\n        }\n\n        toMerge.forEach(function (obj) {\n            for (var prop in obj) {\n                target[prop] = obj[prop];\n            }\n        });\n\n        return target;\n    };\n\n    var dgram = require(\"dgram\"),\n        net = require(\"net\"),\n        WebSocket = require(\"ws\"),\n        modules = [\n            require(\"../osc.js\"),\n            require(\"../osc-transports.js\"),\n            require(\"./osc-websocket-client.js\"),\n            require(\"./osc-node-serialport-loader.js\")\n        ],\n        osc = shallowMerge({}, modules);\n\n\n    /*******\n     * UDP *\n     *******/\n\n    osc.UDPPort = function (options) {\n        osc.Port.call(this, options);\n\n        this.options.localAddress = this.options.localAddress || \"127.0.0.1\";\n        this.options.localPort = this.options.localPort !== undefined ?\n            this.options.localPort : 57121;\n\n        this.options.remoteAddress = this.options.remoteAddress || \"127.0.0.1\";\n        this.options.remotePort = this.options.remotePort !== undefined ?\n            this.options.remotePort : 57121;\n\n        this.on(\"open\", this.listen.bind(this));\n\n        this.socket = options.socket;\n        if (this.socket) {\n            this.emit(\"open\", this.socket);\n        }\n    };\n\n    var p = osc.UDPPort.prototype = Object.create(osc.Port.prototype);\n    p.constructor = osc.UDPPort;\n\n    p.open = function () {\n        var that = this;\n\n        if (this.socket) {\n            return;\n        }\n\n        this.socket = dgram.createSocket(\"udp4\");\n\n        this.socket.on(\"error\", function (error) {\n            that.emit(\"error\", error);\n        });\n\n        function onBound() {\n            osc.UDPPort.setupMulticast(that);\n\n            if (that.options.broadcast) {\n                that.socket.setBroadcast(that.options.broadcast);\n            }\n\n            that.emit(\"open\", that.socket);\n        }\n\n        this.socket.bind(this.options.localPort, this.options.localAddress, onBound);\n    };\n\n    p.listen = function () {\n        if (!this.socket) {\n            return;\n        }\n\n        var that = this;\n        this.socket.on(\"message\", function (msg, rinfo) {\n            that.emit(\"data\", msg, rinfo);\n        });\n\n        this.socket.on(\"close\", function () {\n            that.emit(\"close\");\n        });\n\n        that.emit(\"ready\");\n    };\n\n    p.sendRaw = function (encoded, address, port) {\n        if (!this.socket) {\n            osc.fireClosedPortSendError(this);\n            return;\n        }\n\n        var length = encoded.byteLength !== undefined ? encoded.byteLength : encoded.length,\n            that = this;\n\n        address = address || this.options.remoteAddress;\n        port = port !== undefined ? port : this.options.remotePort;\n\n        this.socket.send(encoded, 0, length, port, address, function (err) {\n            if (err) {\n                that.emit(\"error\", err);\n            }\n        });\n    };\n\n    p.close = function () {\n        if (this.socket) {\n            this.socket.close();\n        }\n    };\n\n    osc.UDPPort.setupMulticast = function (that) {\n        if (that.options.multicastTTL !== undefined) {\n            that.socket.setMulticastTTL(that.options.multicastTTL);\n        }\n\n        if (that.options.multicastMembership) {\n            if (typeof that.options.multicastMembership === \"string\") {\n                that.options.multicastMembership = [that.options.multicastMembership];\n            }\n\n            that.options.multicastMembership.forEach(function (addr) {\n                if (typeof addr === \"string\") {\n                  that.socket.addMembership(addr);\n                } else {\n                  that.socket.addMembership(addr.address, addr.interface);\n                }\n            });\n        }\n    };\n\n\n    /*******\n     * TCP *\n     *******/\n\n    osc.TCPSocketPort = function (options) {\n        osc.SLIPPort.call(this, options);\n\n        var o = this.options;\n\n        // Aliases \"localAddress\" and \"localPort\" to\n        // \"address\" and \"port\", respectively, for consistency\n        // with osc.UDPSocket.\n        o.address = o.address || o.localAddress || \"127.0.0.1\";\n        o.port = o.port !== undefined ? o.port :\n            o.localPort !== undefined ? o.localPort : 57121;\n\n        this.on(\"open\", this.listen.bind(this));\n        this.socket = options.socket;\n\n        if (this.socket) {\n            this.emit(\"open\", this.socket);\n        }\n    };\n\n    p = osc.TCPSocketPort.prototype = Object.create(osc.SLIPPort.prototype);\n    p.constructor = osc.TCPSocketPort;\n\n    p.open = function (address, port) {\n        var o = this.options;\n        address = address || o.address;\n        port = port !== undefined ? port : o.port;\n\n        if (!this.socket) {\n            this.socket = net.connect({\n                port: port,\n                host: address\n            });\n        } else {\n            this.socket.connect(port, address);\n        }\n\n        this.emit(\"open\", this.socket);\n    };\n\n    p.listen = function () {\n        var that = this;\n        this.socket.on(\"data\", function (msg) {\n            that.emit(\"data\", msg, undefined);\n        });\n\n        this.socket.on(\"error\", function (err) {\n            that.emit(\"error\", err);\n        });\n\n        this.socket.on(\"close\", function (hadError) {\n            that.emit(\"close\", hadError);\n        });\n\n        this.socket.on(\"connect\", function () {\n            that.emit(\"ready\");\n        });\n    };\n\n    p.sendRaw = function (encoded) {\n        if (!this.socket) {\n            return;\n        }\n\n        encoded = Buffer.from(encoded);\n\n        try {\n            this.socket.write(encoded);\n        } catch (err) {\n            this.emit(\"error\", err);\n        }\n    };\n\n    p.close = function () {\n        this.socket.end();\n    };\n\n\n    module.exports = osc;\n}());\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}