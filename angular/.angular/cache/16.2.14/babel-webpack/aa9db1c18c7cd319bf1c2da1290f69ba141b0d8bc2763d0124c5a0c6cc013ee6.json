{"ast":null,"code":"/*\n * slip.js: A plain JavaScript SLIP implementation that works in both the browser and Node.js\n *\n * Copyright 2014, Colin Clark\n * Licensed under the MIT and GPL 3 licenses.\n */\n\n/*global exports, define*/\n(function (root, factory) {\n  \"use strict\";\n\n  if (typeof exports === \"object\") {\n    // We're in a CommonJS-style loader.\n    root.slip = exports;\n    factory(exports);\n  } else if (typeof define === \"function\" && define.amd) {\n    // We're in an AMD-style loader.\n    define([\"exports\"], function (exports) {\n      root.slip = exports;\n      return root.slip, factory(exports);\n    });\n  } else {\n    // Plain old browser.\n    root.slip = {};\n    factory(root.slip);\n  }\n})(this, function (exports) {\n  \"use strict\";\n\n  var slip = exports;\n  slip.END = 192;\n  slip.ESC = 219;\n  slip.ESC_END = 220;\n  slip.ESC_ESC = 221;\n  slip.byteArray = function (data, offset, length) {\n    return data instanceof ArrayBuffer ? new Uint8Array(data, offset, length) : data;\n  };\n  slip.expandByteArray = function (arr) {\n    var expanded = new Uint8Array(arr.length * 2);\n    expanded.set(arr);\n    return expanded;\n  };\n  slip.sliceByteArray = function (arr, start, end) {\n    var sliced = arr.buffer.slice ? arr.buffer.slice(start, end) : arr.subarray(start, end);\n    return new Uint8Array(sliced);\n  };\n\n  /**\n   * SLIP encodes a byte array.\n   *\n   * @param {Array-like} data a Uint8Array, Node.js Buffer, ArrayBuffer, or [] containing raw bytes\n   * @param {Object} options encoder options\n   * @return {Uint8Array} the encoded copy of the data\n   */\n  slip.encode = function (data, o) {\n    o = o || {};\n    o.bufferPadding = o.bufferPadding || 4; // Will be rounded to the nearest 4 bytes.\n    data = slip.byteArray(data, o.offset, o.byteLength);\n    var bufLen = data.length + o.bufferPadding + 3 & ~0x03,\n      encoded = new Uint8Array(bufLen),\n      j = 1;\n    encoded[0] = slip.END;\n    for (var i = 0; i < data.length; i++) {\n      // We always need enough space for two value bytes plus a trailing END.\n      if (j > encoded.length - 3) {\n        encoded = slip.expandByteArray(encoded);\n      }\n      var val = data[i];\n      if (val === slip.END) {\n        encoded[j++] = slip.ESC;\n        val = slip.ESC_END;\n      } else if (val === slip.ESC) {\n        encoded[j++] = slip.ESC;\n        val = slip.ESC_ESC;\n      }\n      encoded[j++] = val;\n    }\n    encoded[j] = slip.END;\n    return slip.sliceByteArray(encoded, 0, j + 1);\n  };\n\n  /**\n   * Creates a new SLIP Decoder.\n   * @constructor\n   *\n   * @param {Function} onMessage a callback function that will be invoked when a message has been fully decoded\n   * @param {Number} maxBufferSize the maximum size of a incoming message; larger messages will throw an error\n   */\n  slip.Decoder = function (o) {\n    o = typeof o !== \"function\" ? o || {} : {\n      onMessage: o\n    };\n    this.maxMessageSize = o.maxMessageSize || 10485760; // Defaults to 10 MB.\n    this.bufferSize = o.bufferSize || 1024; // Message buffer defaults to 1 KB.\n    this.msgBuffer = new Uint8Array(this.bufferSize);\n    this.msgBufferIdx = 0;\n    this.onMessage = o.onMessage;\n    this.onError = o.onError;\n    this.escape = false;\n  };\n  var p = slip.Decoder.prototype;\n\n  /**\n   * Decodes a SLIP data packet.\n   * The onMessage callback will be invoked when a complete message has been decoded.\n   *\n   * @param {Array-like} data an incoming stream of bytes\n   */\n  p.decode = function (data) {\n    data = slip.byteArray(data);\n    var msg;\n    for (var i = 0; i < data.length; i++) {\n      var val = data[i];\n      if (this.escape) {\n        if (val === slip.ESC_ESC) {\n          val = slip.ESC;\n        } else if (val === slip.ESC_END) {\n          val = slip.END;\n        }\n      } else {\n        if (val === slip.ESC) {\n          this.escape = true;\n          continue;\n        }\n        if (val === slip.END) {\n          msg = this.handleEnd();\n          continue;\n        }\n      }\n      var more = this.addByte(val);\n      if (!more) {\n        this.handleMessageMaxError();\n      }\n    }\n    return msg;\n  };\n  p.handleMessageMaxError = function () {\n    if (this.onError) {\n      this.onError(this.msgBuffer.subarray(0), \"The message is too large; the maximum message size is \" + this.maxMessageSize / 1024 + \"KB. Use a larger maxMessageSize if necessary.\");\n    }\n\n    // Reset everything and carry on.\n    this.msgBufferIdx = 0;\n    this.escape = false;\n  };\n\n  // Unsupported, non-API method.\n  p.addByte = function (val) {\n    if (this.msgBufferIdx > this.msgBuffer.length - 1) {\n      this.msgBuffer = slip.expandByteArray(this.msgBuffer);\n    }\n    this.msgBuffer[this.msgBufferIdx++] = val;\n    this.escape = false;\n    return this.msgBuffer.length < this.maxMessageSize;\n  };\n\n  // Unsupported, non-API method.\n  p.handleEnd = function () {\n    if (this.msgBufferIdx === 0) {\n      return; // Toss opening END byte and carry on.\n    }\n\n    var msg = slip.sliceByteArray(this.msgBuffer, 0, this.msgBufferIdx);\n    if (this.onMessage) {\n      this.onMessage(msg);\n    }\n\n    // Clear our pointer into the message buffer.\n    this.msgBufferIdx = 0;\n    return msg;\n  };\n  return slip;\n});","map":{"version":3,"names":["root","factory","exports","slip","define","amd","END","ESC","ESC_END","ESC_ESC","byteArray","data","offset","length","ArrayBuffer","Uint8Array","expandByteArray","arr","expanded","set","sliceByteArray","start","end","sliced","buffer","slice","subarray","encode","o","bufferPadding","byteLength","bufLen","encoded","j","i","val","Decoder","onMessage","maxMessageSize","bufferSize","msgBuffer","msgBufferIdx","onError","escape","p","prototype","decode","msg","handleEnd","more","addByte","handleMessageMaxError"],"sources":["C:/Users/tmart/Desktop/Dissertacao/TourOfHeroes/tour-of-heroes-osc.js/tour-of-heroes/node_modules/slip/src/slip.js"],"sourcesContent":["/*\n * slip.js: A plain JavaScript SLIP implementation that works in both the browser and Node.js\n *\n * Copyright 2014, Colin Clark\n * Licensed under the MIT and GPL 3 licenses.\n */\n\n/*global exports, define*/\n(function (root, factory) {\n    \"use strict\";\n\n    if (typeof exports === \"object\") {\n        // We're in a CommonJS-style loader.\n        root.slip = exports;\n        factory(exports);\n    } else if (typeof define === \"function\" && define.amd) {\n        // We're in an AMD-style loader.\n        define([\"exports\"], function (exports) {\n            root.slip = exports;\n            return (root.slip, factory(exports));\n        });\n    } else {\n        // Plain old browser.\n        root.slip = {};\n        factory(root.slip);\n    }\n}(this, function (exports) {\n\n    \"use strict\";\n\n    var slip = exports;\n\n    slip.END = 192;\n    slip.ESC = 219;\n    slip.ESC_END = 220;\n    slip.ESC_ESC = 221;\n\n    slip.byteArray = function (data, offset, length) {\n        return data instanceof ArrayBuffer ? new Uint8Array(data, offset, length) : data;\n    };\n\n    slip.expandByteArray = function (arr) {\n        var expanded = new Uint8Array(arr.length * 2);\n        expanded.set(arr);\n\n        return expanded;\n    };\n\n    slip.sliceByteArray = function (arr, start, end) {\n        var sliced = arr.buffer.slice ? arr.buffer.slice(start, end) : arr.subarray(start, end);\n        return new Uint8Array(sliced);\n    };\n\n    /**\n     * SLIP encodes a byte array.\n     *\n     * @param {Array-like} data a Uint8Array, Node.js Buffer, ArrayBuffer, or [] containing raw bytes\n     * @param {Object} options encoder options\n     * @return {Uint8Array} the encoded copy of the data\n     */\n    slip.encode = function (data, o) {\n        o = o || {};\n        o.bufferPadding = o.bufferPadding || 4; // Will be rounded to the nearest 4 bytes.\n        data = slip.byteArray(data, o.offset, o.byteLength);\n\n        var bufLen = (data.length + o.bufferPadding + 3) & ~0x03,\n            encoded = new Uint8Array(bufLen),\n            j = 1;\n\n        encoded[0] = slip.END;\n\n        for (var i = 0; i < data.length; i++) {\n            // We always need enough space for two value bytes plus a trailing END.\n            if (j > encoded.length - 3) {\n                encoded = slip.expandByteArray(encoded);\n            }\n\n            var val = data[i];\n            if (val === slip.END) {\n                encoded[j++] = slip.ESC;\n                val = slip.ESC_END;\n            } else if (val === slip.ESC) {\n                encoded[j++] = slip.ESC;\n                val = slip.ESC_ESC;\n            }\n\n            encoded[j++] = val;\n        }\n\n        encoded[j] = slip.END;\n        return slip.sliceByteArray(encoded, 0, j + 1);\n    };\n\n    /**\n     * Creates a new SLIP Decoder.\n     * @constructor\n     *\n     * @param {Function} onMessage a callback function that will be invoked when a message has been fully decoded\n     * @param {Number} maxBufferSize the maximum size of a incoming message; larger messages will throw an error\n     */\n    slip.Decoder = function (o) {\n        o = typeof o !== \"function\" ? o || {} : {\n            onMessage: o\n        };\n\n        this.maxMessageSize = o.maxMessageSize || 10485760; // Defaults to 10 MB.\n        this.bufferSize = o.bufferSize || 1024; // Message buffer defaults to 1 KB.\n        this.msgBuffer = new Uint8Array(this.bufferSize);\n        this.msgBufferIdx = 0;\n        this.onMessage = o.onMessage;\n        this.onError = o.onError;\n        this.escape = false;\n    };\n\n    var p = slip.Decoder.prototype;\n\n    /**\n     * Decodes a SLIP data packet.\n     * The onMessage callback will be invoked when a complete message has been decoded.\n     *\n     * @param {Array-like} data an incoming stream of bytes\n     */\n    p.decode = function (data) {\n        data = slip.byteArray(data);\n\n        var msg;\n        for (var i = 0; i < data.length; i++) {\n            var val = data[i];\n\n            if (this.escape) {\n                if (val === slip.ESC_ESC) {\n                    val = slip.ESC;\n                } else if (val === slip.ESC_END) {\n                    val = slip.END;\n                }\n            } else {\n                if (val === slip.ESC) {\n                    this.escape = true;\n                    continue;\n                }\n\n                if (val === slip.END) {\n                    msg = this.handleEnd();\n                    continue;\n                }\n            }\n\n            var more = this.addByte(val);\n            if (!more) {\n                this.handleMessageMaxError();\n            }\n        }\n\n        return msg;\n    };\n\n    p.handleMessageMaxError = function () {\n        if (this.onError) {\n            this.onError(this.msgBuffer.subarray(0),\n                \"The message is too large; the maximum message size is \" +\n                this.maxMessageSize / 1024 + \"KB. Use a larger maxMessageSize if necessary.\");\n        }\n\n        // Reset everything and carry on.\n        this.msgBufferIdx = 0;\n        this.escape = false;\n    };\n\n    // Unsupported, non-API method.\n    p.addByte = function (val) {\n        if (this.msgBufferIdx > this.msgBuffer.length - 1) {\n            this.msgBuffer = slip.expandByteArray(this.msgBuffer);\n        }\n\n        this.msgBuffer[this.msgBufferIdx++] = val;\n        this.escape = false;\n\n        return this.msgBuffer.length < this.maxMessageSize;\n    };\n\n    // Unsupported, non-API method.\n    p.handleEnd = function () {\n        if (this.msgBufferIdx === 0) {\n            return; // Toss opening END byte and carry on.\n        }\n\n        var msg = slip.sliceByteArray(this.msgBuffer, 0, this.msgBufferIdx);\n        if (this.onMessage) {\n            this.onMessage(msg);\n        }\n\n        // Clear our pointer into the message buffer.\n        this.msgBufferIdx = 0;\n\n        return msg;\n    };\n\n    return slip;\n}));\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}