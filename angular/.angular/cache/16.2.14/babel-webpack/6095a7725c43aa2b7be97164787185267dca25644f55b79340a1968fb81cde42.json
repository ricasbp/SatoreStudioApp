{"ast":null,"code":"import * as osc from 'osc';\nimport * as i0 from \"@angular/core\";\nexport class HeroesComponent {\n  ngOnInit() {\n    // Create a new UDP Port for OSC communication\n    this.udpPort = new osc.UDPPort({\n      // Replace with the IP address and port of your OSC server\n      localAddress: \"0.0.0.0\",\n      localPort: 57121\n    });\n    // Open the UDP port for communication\n    this.udpPort.open();\n  }\n  sendOscMessage(address, args) {\n    // Create an OSC message with the given address and arguments\n    const oscMessage = {\n      address: address,\n      args: args\n    };\n    // Send the OSC message\n    this.udpPort.send(oscMessage, \"127.0.0.1\", 57120);\n  }\n  static #_ = this.ɵfac = function HeroesComponent_Factory(t) {\n    return new (t || HeroesComponent)();\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: HeroesComponent,\n    selectors: [[\"app-heroes\"]],\n    decls: 4,\n    vars: 0,\n    consts: [[3, \"click\"]],\n    template: function HeroesComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"h1\");\n        i0.ɵɵtext(1, \"heroes works!\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(2, \"button\", 0);\n        i0.ɵɵlistener(\"click\", function HeroesComponent_Template_button_click_2_listener() {\n          return ctx.sendOSC();\n        });\n        i0.ɵɵtext(3, \" Click me for OSC Message\");\n        i0.ɵɵelementEnd();\n      }\n    },\n    styles: [\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n  });\n}","map":{"version":3,"names":["osc","HeroesComponent","ngOnInit","udpPort","UDPPort","localAddress","localPort","open","sendOscMessage","address","args","oscMessage","send","_","_2","selectors","decls","vars","consts","template","HeroesComponent_Template","rf","ctx","i0","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵlistener","HeroesComponent_Template_button_click_2_listener","sendOSC"],"sources":["C:\\Users\\tmart\\Desktop\\Dissertacao\\TourOfHeroes\\tour-of-heroes-osc.js\\tour-of-heroes\\src\\app\\heroes\\heroes.component.ts","C:\\Users\\tmart\\Desktop\\Dissertacao\\TourOfHeroes\\tour-of-heroes-osc.js\\tour-of-heroes\\src\\app\\heroes\\heroes.component.html"],"sourcesContent":["import {Component, OnInit} from '@angular/core';\nimport * as osc from 'osc';\n\n@Component({\n  selector: 'app-heroes',\n  templateUrl: './heroes.component.html',\n  styleUrls: ['./heroes.component.css']\n})\nexport class HeroesComponent implements OnInit {\n  private udpPort: any;\n\n  ngOnInit() {\n      // Create a new UDP Port for OSC communication\n      this.udpPort = new osc.UDPPort({\n        // Replace with the IP address and port of your OSC server\n        localAddress: \"0.0.0.0\",\n        localPort: 57121\n      });\n  \n      // Open the UDP port for communication\n      this.udpPort.open();\n  }\n  \n  sendOscMessage(address: string, args: any[]) {\n          // Create an OSC message with the given address and arguments\n          const oscMessage = {\n            address: address,\n            args: args\n          };\n    \n        // Send the OSC message\n        this.udpPort.send(oscMessage, \"127.0.0.1\", 57120);\n  }\n}","<h1>heroes works!</h1>\r\n\r\n<button (click)=\"sendOSC()\"> Click me for OSC Message</button>\r\n"],"mappings":"AACA,OAAO,KAAKA,GAAG,MAAM,KAAK;;AAO1B,OAAM,MAAOC,eAAe;EAG1BC,QAAQA,CAAA;IACJ;IACA,IAAI,CAACC,OAAO,GAAG,IAAIH,GAAG,CAACI,OAAO,CAAC;MAC7B;MACAC,YAAY,EAAE,SAAS;MACvBC,SAAS,EAAE;KACZ,CAAC;IAEF;IACA,IAAI,CAACH,OAAO,CAACI,IAAI,EAAE;EACvB;EAEAC,cAAcA,CAACC,OAAe,EAAEC,IAAW;IACnC;IACA,MAAMC,UAAU,GAAG;MACjBF,OAAO,EAAEA,OAAO;MAChBC,IAAI,EAAEA;KACP;IAEH;IACA,IAAI,CAACP,OAAO,CAACS,IAAI,CAACD,UAAU,EAAE,WAAW,EAAE,KAAK,CAAC;EACvD;EAAC,QAAAE,CAAA,G;qBAxBUZ,eAAe;EAAA;EAAA,QAAAa,EAAA,G;UAAfb,eAAe;IAAAc,SAAA;IAAAC,KAAA;IAAAC,IAAA;IAAAC,MAAA;IAAAC,QAAA,WAAAC,yBAAAC,EAAA,EAAAC,GAAA;MAAA,IAAAD,EAAA;QCR5BE,EAAA,CAAAC,cAAA,SAAI;QAAAD,EAAA,CAAAE,MAAA,oBAAa;QAAAF,EAAA,CAAAG,YAAA,EAAK;QAEtBH,EAAA,CAAAC,cAAA,gBAA4B;QAApBD,EAAA,CAAAI,UAAA,mBAAAC,iDAAA;UAAA,OAASN,GAAA,CAAAO,OAAA,EAAS;QAAA,EAAC;QAAEN,EAAA,CAAAE,MAAA,gCAAwB;QAAAF,EAAA,CAAAG,YAAA,EAAS","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}